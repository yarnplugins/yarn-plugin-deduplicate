"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const filesize_1 = tslib_1.__importDefault(require("filesize"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const terser_webpack_plugin_1 = tslib_1.__importDefault(require("terser-webpack-plugin"));
const webpack_sources_1 = require("webpack-sources");
const webpack_1 = tslib_1.__importDefault(require("webpack"));
const isDynamicLib_1 = require("../../tools/isDynamicLib");
const makeConfig_1 = require("../../tools/makeConfig");
// The name gets normalized so that everyone can override some plugins by
// their own (@arcanis/yarn-plugin-foo would override @yarnpkg/plugin-foo
// as well as @mael/yarn-plugin-foo)
const getNormalizedName = (name) => {
    const parsing = name.match(/^(?:@yarnpkg\/|(?:@[^/]+\/)?yarn-)(plugin-[^/]+)/);
    if (parsing === null)
        throw new clipanion_1.UsageError(`Invalid plugin name "${name}" - it should be "yarn-plugin-<something>"`);
    return `@yarnpkg/${parsing[1]}`;
};
// eslint-disable-next-line arca/no-default-export
class BuildPluginCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.noMinify = false;
    }
    async execute() {
        const basedir = process.cwd();
        const portableBaseDir = fslib_1.npath.toPortablePath(basedir);
        const configuration = core_1.Configuration.create(portableBaseDir);
        const { name: rawName } = require(`${basedir}/package.json`);
        const name = getNormalizedName(rawName);
        const prettyName = core_1.structUtils.prettyIdent(configuration, core_1.structUtils.parseIdent(name));
        const output = `${basedir}/bundles/${name}.js`;
        let buildErrors = null;
        const report = await core_1.StreamReport.start({
            configuration,
            includeFooter: false,
            stdout: this.context.stdout,
            forgettableNames: new Set([core_1.MessageName.UNNAMED]),
        }, async (report) => {
            await report.startTimerPromise(`Building ${prettyName}`, async () => {
                const progress = core_1.StreamReport.progressViaCounter(1);
                report.reportProgress(progress);
                const prettyWebpack = core_1.structUtils.prettyIdent(configuration, core_1.structUtils.makeIdent(null, `webpack`));
                const compiler = webpack_1.default(makeConfig_1.makeConfig({
                    context: basedir,
                    entry: `.`,
                    ...!this.noMinify && {
                        mode: `production`,
                    },
                    ...!this.noMinify && {
                        optimization: {
                            minimizer: [
                                new terser_webpack_plugin_1.default({
                                    cache: false,
                                    extractComments: false,
                                    terserOptions: {
                                        ecma: 8,
                                        output: {
                                            comments: /@license/i
                                        }
                                    },
                                }),
                            ],
                        },
                    },
                    output: {
                        filename: path_1.default.basename(output),
                        path: path_1.default.dirname(output),
                        libraryTarget: `var`,
                        library: `plugin`,
                    },
                    externals: [
                        ({ context, request }, callback) => {
                            if (request !== name && isDynamicLib_1.isDynamicLib(request)) {
                                callback(null, `commonjs ${request}`);
                            }
                            else {
                                callback();
                            }
                        },
                    ],
                    plugins: [
                        // This plugin wraps the generated bundle so that it doesn't actually
                        // get evaluated right now - until after we give it a custom require
                        // function that will be able to fetch the dynamic modules.
                        { apply: (compiler) => {
                                compiler.hooks.compilation.tap(`MyPlugin`, (compilation) => {
                                    compilation.hooks.optimizeChunkAssets.tap(`MyPlugin`, (chunks) => {
                                        for (const chunk of chunks) {
                                            for (const file of chunk.files) {
                                                // @ts-ignore
                                                compilation.assets[file] = new webpack_sources_1.RawSource([
                                                    `/* eslint-disable */`,
                                                    `module.exports = {`,
                                                    `name: ${JSON.stringify(name)},`,
                                                    `factory: function (require) {`,
                                                    compilation.assets[file].source(),
                                                    `return plugin;`,
                                                    `}`,
                                                    `};`,
                                                ].join(`\n`));
                                            }
                                        }
                                    });
                                });
                            } },
                        new webpack_1.default.ProgressPlugin((percentage, message) => {
                            progress.set(percentage);
                            if (message) {
                                report.reportInfoOnce(core_1.MessageName.UNNAMED, `${prettyWebpack}: ${message}`);
                            }
                        }),
                    ],
                }));
                buildErrors = await new Promise((resolve, reject) => {
                    compiler.run((err, stats) => {
                        if (err) {
                            reject(err);
                        }
                        else if (stats && stats.compilation.errors.length > 0) {
                            resolve(stats.toString(`errors-only`));
                        }
                        else {
                            resolve(null);
                        }
                    });
                });
            });
        });
        report.reportSeparator();
        if (buildErrors !== null) {
            report.reportError(core_1.MessageName.EXCEPTION, `${chalk_1.default.red(`✗`)} Failed to build ${prettyName}:`);
            report.reportError(core_1.MessageName.EXCEPTION, `${buildErrors}`);
        }
        else {
            report.reportInfo(null, `${chalk_1.default.green(`✓`)} Done building ${prettyName}!`);
            report.reportInfo(null, `${chalk_1.default.cyan(`?`)} Bundle path: ${configuration.format(output, core_1.FormatType.PATH)}`);
            report.reportInfo(null, `${chalk_1.default.cyan(`?`)} Bundle size: ${configuration.format(filesize_1.default(fs_1.default.statSync(output).size), core_1.FormatType.NUMBER)}`);
        }
        return report.exitCode();
    }
}
BuildPluginCommand.usage = clipanion_1.Command.Usage({
    description: `build a local plugin`,
    details: `
      This command builds a local plugin.

      If the \`--no-minify\` option is used, the plugin will be built in development mode, without any optimizations like minifying, symbol scrambling, and treeshaking.
    `,
    examples: [[
            `Build a local plugin`,
            `$0 build plugin`,
        ], [
            `Build a local development plugin`,
            `$0 build plugin --no-minify`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--no-minify`)
], BuildPluginCommand.prototype, "noMinify", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`build`, `plugin`)
], BuildPluginCommand.prototype, "execute", null);
exports.default = BuildPluginCommand;
