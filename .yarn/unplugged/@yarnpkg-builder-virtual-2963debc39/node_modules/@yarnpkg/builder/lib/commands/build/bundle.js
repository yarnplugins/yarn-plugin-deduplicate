"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const child_process_1 = tslib_1.__importDefault(require("child_process"));
const clipanion_1 = require("clipanion");
const filesize_1 = tslib_1.__importDefault(require("filesize"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const terser_webpack_plugin_1 = tslib_1.__importDefault(require("terser-webpack-plugin"));
const util_1 = require("util");
const webpack_1 = tslib_1.__importDefault(require("webpack"));
const findPlugins_1 = require("../../tools/findPlugins");
const makeConfig_1 = require("../../tools/makeConfig");
const execFile = util_1.promisify(child_process_1.default.execFile);
const pkgJsonVersion = (basedir) => {
    return require(`${basedir}/package.json`).version;
};
const suggestHash = async (basedir) => {
    try {
        const unique = await execFile(`git`, [`show`, `-s`, `--pretty=format:%ad.%t`, `--date=short`], { cwd: basedir });
        return `.git.${unique.stdout.trim().replace(/-/g, ``)}`;
    }
    catch (_a) {
        return null;
    }
};
// eslint-disable-next-line arca/no-default-export
class BuildBundleCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.profile = `standard`;
        this.plugins = [];
        this.noGitHash = false;
        this.noMinify = false;
    }
    async execute() {
        const basedir = process.cwd();
        const portableBaseDir = fslib_1.npath.toPortablePath(basedir);
        const configuration = core_1.Configuration.create(portableBaseDir);
        const plugins = findPlugins_1.findPlugins({ basedir, profile: this.profile, plugins: this.plugins.map(plugin => path_1.default.resolve(plugin)) });
        const modules = [...cli_1.getDynamicLibs().keys()].concat(plugins);
        const output = `${basedir}/bundles/yarn.js`;
        let version = pkgJsonVersion(basedir);
        const hash = !this.noGitHash
            ? await suggestHash(basedir)
            : null;
        if (hash !== null)
            version = version.replace(/-(.*)?$/, `-$1${hash}`);
        let buildErrors = null;
        const report = await core_1.StreamReport.start({
            configuration,
            includeFooter: false,
            stdout: this.context.stdout,
            forgettableNames: new Set([core_1.MessageName.UNNAMED]),
        }, async (report) => {
            await report.startTimerPromise(`Building the CLI`, async () => {
                const progress = core_1.StreamReport.progressViaCounter(1);
                report.reportProgress(progress);
                const prettyWebpack = core_1.structUtils.prettyIdent(configuration, core_1.structUtils.makeIdent(null, `webpack`));
                const compiler = webpack_1.default(makeConfig_1.makeConfig({
                    context: basedir,
                    entry: `./sources/cli.ts`,
                    bail: true,
                    ...!this.noMinify && {
                        mode: `production`,
                    },
                    ...!this.noMinify && {
                        optimization: {
                            minimizer: [
                                new terser_webpack_plugin_1.default({
                                    cache: false,
                                    extractComments: false,
                                    terserOptions: {
                                        ecma: 8,
                                    },
                                }),
                            ],
                        },
                    },
                    output: {
                        filename: path_1.default.basename(output),
                        path: path_1.default.dirname(output),
                    },
                    resolve: {
                        alias: {
                            [path_1.default.resolve(basedir, `./sources/tools/getPluginConfiguration.ts`)]: path_1.default.resolve(basedir, `./sources/tools/getPluginConfiguration.val.js`),
                        },
                    },
                    module: {
                        rules: [{
                                // This file is particular in that it exposes the bundle
                                // configuration to the bundle itself (primitive introspection).
                                test: /[\\/]getPluginConfiguration\.val\.js$/,
                                use: {
                                    loader: require.resolve(`val-loader`),
                                    options: { modules, plugins },
                                },
                            }],
                    },
                    plugins: [
                        new webpack_1.default.BannerPlugin({
                            entryOnly: true,
                            banner: `#!/usr/bin/env node\n/* eslint-disable */`,
                            raw: true,
                        }),
                        new webpack_1.default.DefinePlugin({
                            [`YARN_VERSION`]: JSON.stringify(version),
                        }),
                        new webpack_1.default.ProgressPlugin((percentage, message) => {
                            progress.set(percentage);
                            if (message) {
                                report.reportInfoOnce(core_1.MessageName.UNNAMED, `${prettyWebpack}: ${message}`);
                            }
                        }),
                    ],
                }));
                buildErrors = await new Promise((resolve, reject) => {
                    compiler.run((err, stats) => {
                        if (err) {
                            reject(err);
                        }
                        else if (stats && stats.compilation.errors.length > 0) {
                            resolve(stats.toString(`errors-only`));
                        }
                        else {
                            resolve(null);
                        }
                    });
                });
            });
        });
        report.reportSeparator();
        if (buildErrors) {
            report.reportError(core_1.MessageName.EXCEPTION, `${chalk_1.default.red(`✗`)} Failed to build the CLI:`);
            report.reportError(core_1.MessageName.EXCEPTION, `${buildErrors}`);
        }
        else {
            report.reportInfo(null, `${chalk_1.default.green(`✓`)} Done building the CLI!`);
            report.reportInfo(null, `${chalk_1.default.cyan(`?`)} Bundle path: ${configuration.format(output, core_1.FormatType.PATH)}`);
            report.reportInfo(null, `${chalk_1.default.cyan(`?`)} Bundle size: ${configuration.format(filesize_1.default(fs_1.default.statSync(output).size), core_1.FormatType.NUMBER)}`);
            report.reportSeparator();
            for (const plugin of plugins) {
                report.reportInfo(null, `${chalk_1.default.yellow(`→`)} ${core_1.structUtils.prettyIdent(configuration, core_1.structUtils.parseIdent(plugin))}`);
            }
        }
        return report.exitCode();
    }
}
BuildBundleCommand.usage = clipanion_1.Command.Usage({
    description: `build the local bundle`,
    details: `
      This command builds the local bundle - the Yarn binary file that is installed in projects.

      If the \`--no-minify\` option is used, the bundle will be built in development mode, without any optimizations like minifying, symbol scrambling, and treeshaking.

      If the \`--no-git-hash\` option is used, the version of the bundle won't include the git hash of the current commit.

      If the \`--profile\` flag is set, the bundle will only include the plugins that are part of the the specified profile.

      If the \`--plugin\` flag is used, the bundle will also include the specified plugins besides the ones included in the specified profile.
    `,
    examples: [[
            `Build the local bundle`,
            `$0 build bundle`,
        ], [
            `Build the local development bundle`,
            `$0 build bundle --no-minify`,
        ]],
});
tslib_1.__decorate([
    clipanion_1.Command.String(`--profile`)
], BuildBundleCommand.prototype, "profile", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Array(`--plugin`)
], BuildBundleCommand.prototype, "plugins", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--no-git-hash`)
], BuildBundleCommand.prototype, "noGitHash", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Boolean(`--no-minify`)
], BuildBundleCommand.prototype, "noMinify", void 0);
tslib_1.__decorate([
    clipanion_1.Command.Path(`build`, `bundle`)
], BuildBundleCommand.prototype, "execute", null);
exports.default = BuildBundleCommand;
